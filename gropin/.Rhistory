myAxis<-colnames(responseSurface)
esponseSurface.pivot(index='X1',columns='X2',values='X3')
responseSurface.pivot(index='X1',columns='X2',values='X3')
install.packages('reshape')
library(reshape)
cast(responseSurface, X1 ~ X2)
#responseSurface <- data.frame(cbind(seq(1,10),seq(1,10)))
responseSurface <- data.frame(cbind(rep(1:4,4),rep(1:4,4),seq(1,16)))
cast(responseSurface, X1 ~ X2)
#responseSurface <- data.frame(cbind(seq(1,10),seq(1,10)))
responseSurface <- data.frame(cbind(rep(1:4,4),rep(1:4,times=4),seq(1,16)))
View(responseSurface)
#responseSurface <- data.frame(cbind(seq(1,10),seq(1,10)))
responseSurface <- data.frame(cbind(rep(1:4,4),rep(1:4,each=4),seq(1,16)))
cast(responseSurface, X1 ~ X2)
dcast(responseSurface, X1 ~ X2)
install.packages("reshape2")
library(reshape2)
dcast(responseSurface, X1 ~ X2)
acast(responseSurface, X1 ~ X2)
lagTime <- 10
logIncrease <- 1
#responseSurface <- data.frame(cbind(seq(1,10),seq(1,10)))
responseSurface <- data.frame(cbind(rep(1:4,4),rep(1:4,each=4),seq(1,16)))
#############################
# start of Model script
#############################
myDF <- dim(responseSurface)
# mumax is always in the last column
mumax <- responseSurface[,myDF[2]]
# all corresponding parameters are in the other columns
nrOfIndependentVars <- myDF[2]-1
argumentsPar <- responseSurface[,1:nrOfIndependentVars]
timeToXlog <- lagTime + logIncrease/mumax
timeToXlog
timeToXlog <- data.frame(cbind(argumentsPar,lagTime + logIncrease/mumax))
timeToXlog <- lagTime + logIncrease/mumax
resultDF <- data.frame(cbind(argumentsPar,timeToXlog))
myAxis <- colnames(argumentsPar)
timeToXlog <- lagTime + logIncrease/mumax
resultDF <- acast(data.frame(cbind(argumentsPar,timeToXlog)),myAxis[1] ~ myAxis[2])
resultDF
data.frame(cbind(argumentsPar,timeToXlog))
myDF <- data.frame(cbind(argumentsPar,timeToXlog))
acast(myDF,X1~X2)
acast(myDF,myAxis)
acast(myDF,myAxis[1]~myAxis[Â²])
acast(myDF,myAxis[1]~myAxis[2])
myAxis
acast(myDF,as.character(myAxis[1])~as.character(myAxis[2]))
acast(myDF,as.factor(myAxis[1])~as.factor(myAxis[2]))
acast(myDF,as.formula(myAxis[1])~as.formula(myAxis[2]))
acast(myDF,paste(myAxis[1], myAxis[2], sep="~")
)
acast(myDF,paste(myAxis[1], myAxis[2], sep="~"))
myDF
acast(myDF,paste(myAxis[1], myAxis[2], sep="~"),value=timeToXlog)
acast(myDF,paste(myAxis[1], myAxis[2], sep="~"))
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
lagTime <- 10
logIncrease <- 1
#responseSurface <- data.frame(cbind(seq(1,10),seq(1,10)))
responseSurface <- data.frame(cbind(rep(1:4,4),rep(1:4,each=4),seq(1,16)))
#############################
# start of Model script
#############################
myDF <- dim(responseSurface)
# mumax is always in the last column
mumax <- responseSurface[,myDF[2]]
# all corresponding parameters are in the other columns
nrOfIndependentVars <- myDF[2]-1
argumentsPar <- responseSurface[,1:nrOfIndependentVars]
myAxis <- colnames(argumentsPar)
timeToXlog <- lagTime + logIncrease/mumax
myDF <- data.frame(cbind(argumentsPar,timeToXlog))
result <- acast(myDF,paste(myAxis[1], myAxis[2], sep="~"))
responseSurface[,1]
colnames(myDF)
colnames(result)
as.numeric(colnames(result))
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
library(reshape2)
remove.packages("reshape2")
library(reshape2)
startsWith("test","s")
library(stringr)
a <- " anything goes here, STR1 GET_ME STR2, anything goes here"
res <- str_match(a, "STR1\\s*(.*?)\\s*STR2")
res
a <- " anything goesSTR2 here, STR1 GET_MESTR2, anything goes here"
res <- str_match(a, "STR1\\s*(.*?)\\s*STR2")
res
#library(rjson)
library(zip)
# project path / obsolete in source mode
thisProjectPath <- "C:/Users/Joker/Documents/Projects/ModelRepository/gropin/"
tempFolder <- "temp/"
sourceSubFolder <- "testingstuff/"
targetSubFolder <- "finishedFSKX/"
myList <- list.files(file.path(thisProjectPath,sourceSubFolder),pattern="*.fskx")
myList
targetSubFolder <- "finishedTEST/"
myList <- list.files(file.path(thisProjectPath,sourceSubFolder),pattern="*.fskx")
if(!dir.exists(file.path(thisProjectPath,targetSubFolder))){
dir.create(file.path(thisProjectPath,targetSubFolder))
}
# bring current date into format used by meta data schema
currentDate <- sub("0?(.+)-0?(.+)-0?(.+)", "\\1,\\2,\\3", Sys.Date())
# new metadata string
newCreationDate <- paste0(",\"creationDate\":[",
currentDate,
"],\"modificationDate\":[]")
run <- 1
#for(run in 1:length(myList)) {
# check if folders exist
if(!dir.exists(file.path(thisProjectPath,tempFolder))){
dir.create(file.path(thisProjectPath,tempFolder))
}
zipSourceFile <- paste0(thisProjectPath,sourceSubFolder,myList[run])
zipTargetFile <- paste0(thisProjectPath,targetSubFolder,myList[run])
# unload fskx file into temp folder
unzip(zipSourceFile,exdir = file.path(thisProjectPath,tempFolder))
##############################################################
# PUT YOUR CHANGES IN HERE
##############################################################
# get metaData for creation Date
oldData <- readLines(paste0(thisProjectPath,tempFolder,"metaData.json"))
# replace no Creation date with current day
# NOTE! works only if no creation date was entered!
changedData <- gsub(pattern = ",\"rights\":\"",
replace = paste0(newCreationDate,",\"rights\":\""),
x = oldData)
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "\"comment\":\"\\s*(.*?)\\s*\"}],\"")
newData <- changedData
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "\"comment\":\"\\s*(.*?)\\s*\"}],\"")
changedData
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "\"comment\":\"\\s*(.*?)\\s*\"}],")
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment:\\s*(.*?)\\s*}],")
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\\s*(.*?)\\s*t")
capturedJournalInfo
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\\s*(.*?)\\s*language")
capturedJournalInfo[2]
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\\s*(.*?)\\s*language")
capturedJournalInfo[2]
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\"\\s*(.*?)\\s*language")
capturedJournalInfo[2]
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"}]")
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"}]")
capturedJournalInfo[2]
as.list(strsplit(capturedJournalInfo[2], ",")[[1]])
as.list(strsplit(capturedJournalInfo[2], ","))
as.list(strsplit(capturedJournalInfo[2], ","))[1]
as.list(strsplit(capturedJournalInfo[2], ","))[[1]
]
list(strsplit(capturedJournalInfo[2], ","))[[1]
]
list(strsplit(capturedJournalInfo[2], ","))
strsplit(capturedJournalInfo[2], ",")
unlist(strsplit(capturedJournalInfo[2], ","))
unlist(strsplit(capturedJournalInfo[2], ","))[1]
unlist(strsplit(capturedJournalInfo[2], ","))[2]
unlist(strsplit(capturedJournalInfo[2], ","))[3]
#library(rjson)
library(zip)
library(stringr)
# project path / obsolete in source mode
thisProjectPath <- "C:/Users/Joker/Documents/Projects/ModelRepository/gropin/"
tempFolder <- "temp/"
sourceSubFolder <- "fskx/"
#targetSubFolder <- "finishedFSKX/"
targetSubFolder <- "testingstuff/"
myList <- list.files(file.path(thisProjectPath,sourceSubFolder),pattern="*.fskx")
# create target folder if not existing
if(!dir.exists(file.path(thisProjectPath,targetSubFolder))){
dir.create(file.path(thisProjectPath,targetSubFolder))
}
# bring current date into format used by meta data schema
currentDate <- sub("0?(.+)-0?(.+)-0?(.+)", "\\1,\\2,\\3", Sys.Date())
# new metadata string
newCreationDate <- paste0(",\"creationDate\":[",
currentDate,
"],\"modificationDate\":[]")
run <- 1
#for(run in 1:length(myList)) {
# check if folders exist
if(!dir.exists(file.path(thisProjectPath,tempFolder))){
dir.create(file.path(thisProjectPath,tempFolder))
}
zipSourceFile <- paste0(thisProjectPath,sourceSubFolder,myList[run])
zipTargetFile <- paste0(thisProjectPath,targetSubFolder,myList[run])
# put fskx file into temp folder
unzip(zipSourceFile,exdir = file.path(thisProjectPath,tempFolder))
##############################################################
# PUT YOUR CHANGES IN HERE
##############################################################
# get metaData for creation Date
oldData <- readLines(paste0(thisProjectPath,tempFolder,"metaData.json"))
# replace no Creation date with current day
# NOTE! works only if no creation date was entered!
changedData <- gsub(pattern = ",\"rights\":\"",
replace = paste0(newCreationDate,",\"rights\":\""),
x = oldData)
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")
journalVolumeIssue <- unlist(strsplit(capturedJournalInfo[2], ","))
myString <- paste0("journal\":\"",
journalVolumeIssue[1],
"\",\"volume\":\"",
journalVolumeIssue[2],
"\",\"issue\":\"",
journalVolumeIssue[3],
"\",\"status\":\"Published\",",
"\"website\":\"https://www.aua.gr/psomas/gropin/\",",
"\"comment\":\"\",\"abstract\":\"\"")
# replace placeholder comment (containing reference info)
# with correct entries in forms, so that FSK-Lab may read this correctly
# NOTE! works only, if gropin2R script stores info about
# journal,volume,issue in the comment section of this reference
# TODO: extension step: creating the whole metadata.json file and all other
# necessary files for fskx in 1 R-script (takes more time to develop)
newData <- gsub(pattern = str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")[1],
replace = myString,
x = changedData)
str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")[1]
str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")[2]
#editing sim.sedml
testthisa <- "testme"
oldSim <- readLines(paste0(thisProjectPath,tempFolder,"sim.sedml"))
str_match(oldSim, "newValue=\"\\s*(.*?)\\s*\"")
str_match(oldSim, "newValue=\"\\s*(.*?)\\s*\"")[1]
str_match(oldSim, "newValue=\"\\s*(.*?)\\s*\"")[,1]
str_match(oldSim, "newValue=\"\\s*(.*?)\\s*\"")[,2]
length(str_match(oldSim, "newValue=\"\\s*(.*?)\\s*\"")[,2])
qq<-str_match(oldSim, "newValue=\"\\s*(.*?)\\s*\"")[,2]
qq[!is.na(qq)]
qq1<-qq[!is.na(qq)]
eval(qq1[1])
eval(parse(text="5+5"))
eval(parse(text=qq1))
qq
qq1
eval(parse(text=qq1))
eval(parse(text=qq1[1]))
eval(parse(text=qq1[2]))
eval(parse(text=qq1[3]))
mean(eval(parse(text=qq1[3])))
mean(eval(parse(text=qq1[2])))
mean(eval(parse(text=qq1[1])))
source('~/Projects/ModelRepository/gropin/editfskx.r')
searchString2
listOfTasks
source('~/Projects/ModelRepository/gropin/editfskx.r')
source('~/Projects/ModelRepository/gropin/editfskx.r')
#library(rjson)
library(zip)
library(stringr)
# project path / obsolete in source mode
thisProjectPath <- "C:/Users/Joker/Documents/Projects/ModelRepository/gropin/"
tempFolder <- "temp/"
sourceSubFolder <- "fskx/"
#targetSubFolder <- "finishedFSKX/"
targetSubFolder <- "testingstuff/"
myList <- list.files(file.path(thisProjectPath,sourceSubFolder),pattern="*.fskx")
# create target folder if not existing
if(!dir.exists(file.path(thisProjectPath,targetSubFolder))){
dir.create(file.path(thisProjectPath,targetSubFolder))
}
# bring current date into format used by meta data schema
currentDate <- sub("0?(.+)-0?(.+)-0?(.+)", "\\1,\\2,\\3", Sys.Date())
# new metadata string
newCreationDate <- paste0(",\"creationDate\":[",
currentDate,
"],\"modificationDate\":[]")
run <- 1
#for(run in 1:length(myList)) {
# check if folders exist
if(!dir.exists(file.path(thisProjectPath,tempFolder))){
dir.create(file.path(thisProjectPath,tempFolder))
}
zipSourceFile <- paste0(thisProjectPath,sourceSubFolder,myList[run])
zipTargetFile <- paste0(thisProjectPath,targetSubFolder,myList[run])
# put fskx file into temp folder
unzip(zipSourceFile,exdir = file.path(thisProjectPath,tempFolder))
##############################################################
# PUT YOUR CHANGES IN HERE
##############################################################
# get metaData for creation Date
oldData <- readLines(paste0(thisProjectPath,tempFolder,"metaData.json"))
# replace no Creation date with current day
# NOTE! works only if no creation date was entered!
changedData <- gsub(pattern = ",\"rights\":\"",
replace = paste0(newCreationDate,",\"rights\":\""),
x = oldData)
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")
journalVolumeIssue <- unlist(strsplit(capturedJournalInfo[2], ","))
myString <- paste0("journal\":\"",
journalVolumeIssue[1],
"\",\"volume\":\"",
journalVolumeIssue[2],
"\",\"issue\":\"",
journalVolumeIssue[3],
"\",\"status\":\"Published\",",
"\"website\":\"https://www.aua.gr/psomas/gropin/\",",
"\"comment\":\"\",\"abstract\":\"\"")
# replace placeholder comment (containing reference info)
# with correct entries in forms, so that FSK-Lab may read this correctly
# NOTE! works only, if gropin2R script stores info about
# journal,volume,issue in the comment section of this reference
# TODO: extension step: creating the whole metadata.json file and all other
# necessary files for fskx in 1 R-script (takes more time to develop)
newData <- gsub(pattern = str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")[1],
replace = myString,
x = changedData)
#editing sim.sedml
# TODO extract values qq<-str_match(oldSim, "newValue=\"\\s*(.*?)\\s*\"")[,2]
#> qq[!is.na(qq)]
# mean eval(parse(text=qq1))
# insert new values
# edit task id and so on
testthisa <- "testme"
oldSim <- readLines(paste0(thisProjectPath,tempFolder,"sim.sedml"))
# find the names values of all variables
originalValuesVariablesVec <- str_match(oldSim, "newValue=\"\\s*(.*?)\\s*\"")[,2]
originalValuesVariablesVec <- originalValuesVariablesVec[!is.na(originalValuesVariablesVec)]
originalNamesVariablesVec <- str_match(oldSim, "target=\"\\s*(.*?)\\s*\"")[,2]
originalNamesVariablesVec <- originalNamesVariablesVec[!is.na(originalNamesVariablesVec)]
# marker for end of simulation settings
searchString1 <- "<listOfModels>\\s*(.*?)\\s*</listOfModels>"
listOfSimulations <- str_match(paste0(oldSim,collapse = ''), searchString1)[2]
listOfSimulations <- append(listOfSimulations,"<listOfModels>",after = 0)
for(sim in 1:length(originalNamesVariablesVec)) {
nameOfSimulation <- paste("point value for",originalNamesVariablesVec[sim])
newValuesVariables <- originalValuesVariablesVec
#just change 1 variable for each simulation setting
newValuesVariables[sim] <- mean(eval(parse(text=originalValuesVariablesVec[sim])))
newSim <- paste0("<model id=\"",
nameOfSimulation,
"\" name=\"\" language=\"https://iana.org/assignments/mediatypes/text/x-r\" source=\"./model.r\">\n\t",
"<listOfChanges>\n\t\t",
"<changeAttribute newValue=\"",
newValuesVariables[1],
"\" target=\"",
originalNamesVariablesVec[1],
"\" />\n\t\t",
"<changeAttribute newValue=\"",
newValuesVariables[2],
"\" target=\"",
originalNamesVariablesVec[2],
"\" />\n\t\t",
"<changeAttribute newValue=\"",
newValuesVariables[3],
"\" target=\"",
originalNamesVariablesVec[3],
"\" />\n\t",
"</listOfChanges>\n</model>\n")
listOfSimulations <- append(listOfSimulations,newSim)
}
listOfSimulations <- append(listOfSimulations,"</listOfModels>")
newSim1 <- gsub(pattern = searchString1,
replace = paste(listOfSimulations,collapse=''),
x = paste(oldSim,collapse=''))
searchString2 <- "<listOfTasks>\\s*(.*?)\\s*</listOfTasks>"
listOfTasks <- str_match(paste0(newSim1,collapse = ''), searchString2)[2]
listOfTasks <- append(listOfTasks,"<listOfTasks>",after = 0)
for(sim in 1:length(originalNamesVariablesVec)) {
nameOfSimulation <- paste("point value for",originalNamesVariablesVec[sim])
newTaskIDs <- paste0("task",sim)
newSim2 <- paste0("\t<task id=\"",
newTaskIDs,
"\" name=\"\" modelReference=\"",
nameOfSimulation,
"\" simulationReference=\"steadyState\" />")
listOfTasks <- append(listOfTasks,newSim2)
}
listOfTasks <- append(listOfTasks,"</listOfTasks>")
newSim2 <- gsub(pattern = searchString2,
replace = paste(listOfTasks,collapse=''),
x = paste(newSim1,collapse=''))
##############################################################
# ALL CHANGES HAVE TO BE DONE BY NOW
##############################################################
fileConn <- file(paste0(thisProjectPath,tempFolder,"sim.sedml"))
writeLines(newSim2,fileConn)
close(fileConn)
source('~/Projects/ModelRepository/gropin/editfskx.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript36.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript36.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript23.r')
source('~/Projects/ModelRepository/gropin/editfskx.r')
#library(rjson)
library(zip)
library(stringr)
# for easy count ups
`%+=%` = function(e1,e2) eval.parent(substitute(e1 <- e1 + e2))
# project path / obsolete in source mode
thisProjectPath <- "C:/Users/Joker/Documents/Projects/ModelRepository/gropin/"
tempFolder <- "temp/"
sourceSubFolder <- "fskx/"
targetSubFolder <- "finishedFSKXnewtest/"
#targetSubFolder <- "testingstuff/"
#########################
# name place holder for new simulation settin names
newSimName <- "point_Value_For_"
myList <- list.files(file.path(thisProjectPath,sourceSubFolder),pattern="*.fskx")
# create target folder if not existing
if(!dir.exists(file.path(thisProjectPath,targetSubFolder))){
dir.create(file.path(thisProjectPath,targetSubFolder))
}
# bring current date into format used by meta data schema
currentDate <- sub("0?(.+)-0?(.+)-0?(.+)", "\\1,\\2,\\3", Sys.Date())
# new metadata string
newCreationDate <- paste0(",\"creationDate\":[",
currentDate,
"],\"modificationDate\":[]")
run <- 2
#for(run in 1:length(myList)) {
# check if folders exist
if(!dir.exists(file.path(thisProjectPath,tempFolder))){
dir.create(file.path(thisProjectPath,tempFolder))
}
zipSourceFile <- paste0(thisProjectPath,sourceSubFolder,myList[run])
zipTargetFile <- paste0(thisProjectPath,targetSubFolder,myList[run])
# put fskx file into temp folder
unzip(zipSourceFile,exdir = file.path(thisProjectPath,tempFolder))
##############################################################
# PUT YOUR CHANGES IN HERE
##############################################################
##### Creation Date ########
# get metaData for creation Date
oldData <- readLines(paste0(thisProjectPath,tempFolder,"metaData.json"))
# replace no Creation date with current day
# NOTE! works only if no creation date was entered!
changedData <- gsub(pattern = ",\"rights\":\"",
replace = paste0(newCreationDate,",\"rights\":\""),
x = oldData)
##### Creation Date ########
##### Reference Edit ########
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")
journalVolumeIssue <- unlist(strsplit(capturedJournalInfo[2], ","))
myString <- paste0("journal\":\"",
journalVolumeIssue[1],
"\",\"volume\":\"",
journalVolumeIssue[2],
"\",\"issue\":\"",
journalVolumeIssue[3],
"\",\"status\":\"Published\",",
"\"website\":\"https://www.aua.gr/psomas/gropin/\",",
"\"comment\":\"\",\"abstract\":\"\"")
# replace placeholder comment (containing reference info)
# with correct entries in forms, so that FSK-Lab may read this correctly
# NOTE! works only, if gropin2R script stores info about
# journal,volume,issue in the comment section of this reference
# TODO: extension step: creating the whole metadata.json file and all other
# necessary files for fskx in 1 R-script (takes more time to develop)
newData <- gsub(pattern = str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")[1],
replace = myString,
x = changedData)
##### New Simulation Settings ########
#editing sim.sedml
oldSim <- readLines(paste0(thisProjectPath,tempFolder,"sim.sedml"))
# find the names and values of all variables
originalValuesVariablesVec <- str_match(oldSim, "newValue=\"\\s*(.*?)\\s*\"")[,2]
originalValuesVariablesVec <- originalValuesVariablesVec[!is.na(originalValuesVariablesVec)]
originalNamesVariablesVec <- str_match(oldSim, "target=\"\\s*(.*?)\\s*\"")[,2]
originalNamesVariablesVec <- originalNamesVariablesVec[!is.na(originalNamesVariablesVec)]
# all permutation of pairs of parameters
varPairs <- combn(originalNamesVariablesVec[!is.na(originalNamesVariablesVec)],2)
nrOfPermutations <- dim(varPairs)[2] # should be choose(nrOfVariables,nrOfVariables-2)
# marker for end of simulation settings
#searchString1 <- "<listOfModels>\\s*(.*?)\\s*</listOfModels>"
locationOfEdit <- which(gsub("[[:space:]]", "", oldSim) %in% "</listOfModels>")-1
# all permutation of pairs of parameters
varPairs <- combn(originalNamesVariablesVec[!is.na(originalNamesVariablesVec)],2)
varPairs
originalNamesVariablesVec
originalNamesVariablesVec
length(originalNamesVariablesVec)
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/editfskx.r')
