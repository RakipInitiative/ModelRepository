"Var1",
"Var1Min",
"Var1Max",
"Var2",
"Var2Min",
"Var2Max",
"Var3",
"Var3Min",
"Var3Max",
"Var4",
"Var4Min",
"Var4Max",
"Var5",
"Var5Min",
"Var5Max",
"Var6",
"Var6Min",
"Var6Max",
"Var7",
"Var7Min",
"Var7Max",
"Var8",
"Var8Min",
"Var8Max",
"Var9",
"Var9Min",
"Var9Max",
"Authors",
"Paper",
"Journal",
"Issue",
"Var10",
"Var10Min",
"Var10Max",
"INACTIVE",
"Microorganism",
"First author",
"Product",
"psicheck",
"LETHALITY",
"DMRI",
"MODELCATEG",
"INTEGRATED",
"mumaxUn",
"AUG_ZU",
"Rate label",
"Special notes",
"Reference equation",
"Co1",
"Co1val",
"Co2",
"Co2val",
"Co3",
"Co3val",
"Co4",
"Co4val",
"Co5",
"Co5val",
"Co6",
"Co6val",
"Co7",
"Co7val",
"Co8",
"Co8val",
"Co9",
"Co9val",
"Co10",
"Co10val",
"Co11",
"Co11val",
"Co12",
"Co12val",
"Co13",
"Co13val",
"Co14",
"Co14val",
"Co15",
"Co15val",
"Co16",
"Co16val",
"Co17",
"Co17val",
"Co18",
"Co18val",
"Co19",
"Co19val",
"Co20",
"Co20val",
"Type of simulation",
"mumax",
"equation")
# read in and format certain aspects of database to needs of R
#gropinDB <- read_excel("GroPIN-ver.3.xlsm", sheet = "Nonlinear") # 1st version we did try to convert
gropinDB <- read_excel(gropinDBfilename, sheet = "Nonlinear") # current version
# replace some special characters
names(gropinDB)<-gsub("/","_",names(gropinDB))
# replace "(...string....)" but not in the equation column (column 95 aka last)
gropinDB[,1:94] <- data.frame(lapply(gropinDB[,1:94],
function(x) {gsub('[()]', '_', x)}))
gropinDB[,1:94] <- data.frame(lapply(gropinDB[,1:94],
function(x) {gsub('[/]', '_', x)}))
gropinDB[,1:94] <- data.frame(lapply(gropinDB[,1:94],
function(x) {gsub('[+]', '_', x)}))
gropinDB[,1:94] <- data.frame(lapply(gropinDB[,1:94],
function(x) {gsub('[+]', '_', x)}))
names(gropinDB) <- newNamesForGropinColumns
# filtering models according to identifiers in data base
# currently, only growthModels are considered.
# future versions of this transfer code will include all types of models
growthNoGrowthModels <- gropinDB %>% filter(Model == 'GNG')
growthModels <- gropinDB %>% filter(!grepl('INA',INACTIVE)&
Model == 'GRT'&
!grepl('AUG',AUG_ZU)&
!grepl('LTH',LETHALITY))
lethalityModels <- gropinDB %>% filter(grepl('LTH',LETHALITY))
gammaModelsWithInteraction <- gropinDB %>% filter(grepl('AUG',AUG_ZU))
inactivationModels <- gropinDB %>% filter(grepl('INA',INACTIVE))
#create list of all possible variables
existingVariables <- table(cbind(as.character(growthModels$Var1),
as.character(growthModels$Var2),
as.character(growthModels$Var3),
as.character(growthModels$Var4),
as.character(growthModels$Var5),
as.character(growthModels$Var6),
as.character(growthModels$Var7),
as.character(growthModels$Var8),
as.character(growthModels$Var9),
as.character(growthModels$Var10)))
allVariables <- as.character(data.frame(existingVariables)$Var1)
################################################################################
# END PART ONE: Preprocessing
################################################################################
run <- 254
################################################################################
# START PART TWO: creating scripts
################################################################################
nrModels <- dim(growthModels)[1]
#initialising
model2Vars <- NA
#for(run in 1:nrModels){
# exlude model from conversion any model given in list above
if(growthModels$ModelID[run] %in% listOfNonfunctioningModels) {
print("Nope")
next
}
# get all 9 variables from data base
# variable has the following properties: name, range(from, to)
# no unit is given, no description
myVarNames <- c(as.character(growthModels$Var1[run]),
as.character(growthModels$Var2[run]),
as.character(growthModels$Var3[run]),
as.character(growthModels$Var4[run]),
as.character(growthModels$Var5[run]),
as.character(growthModels$Var6[run]),
as.character(growthModels$Var7[run]),
as.character(growthModels$Var8[run]),
as.character(growthModels$Var9[run]),
as.character(growthModels$Var10[run]))
# some names of parameters have special characters,
# that need to be dealt with -> names of variables will become variable names
# in their own R scripts, therefore must be free of special characters
myVarNames <- gsub("[+/-]","",myVarNames)
myVarNames <- gsub(" ","",myVarNames)
# phrase of gropin, marks end of list of variables
if("notused" %in% myVarNames) {
myVarNames[which(myVarNames %in% "notused")] <- NA
}
# different models have different number of variables (rest is NA)
nrOfVariables <- length(table(myVarNames))
#collecting unique variables from models with less than 3 variables
# for 1st extension step, adding metadata info to those 2-variable models
if(nrOfVariables<=3){
model2Vars <- append(model2Vars,myVarNames)
}
# extension step 1: transfer growth models with 1&2 variables only
if(nrOfVariables>3){
print("wait for extension step 3")
next
}
# note that few models have zeros in rare cases
# in the denominator of a fraction term
# solution: set boundaries of sequence to inner boundaries to catch cases
# where subtraction of variables and coefficients in denominator happen
# TODO check if factorisation with 1.01*myVarMin and 0.99*myVarMax obsolete
# in future versions of gropin
shiftingRangeOfVariablesSlightly <- 1.001
# store range info of variables
myVarMin <- c(as.double(as.character(growthModels$Var1Min[run])),
as.double(as.character(growthModels$Var2Min[run])),
as.double(as.character(growthModels$Var3Min[run])),
as.double(as.character(growthModels$Var4Min[run])),
as.double(as.character(growthModels$Var5Min[run])),
as.double(as.character(growthModels$Var6Min[run])),
as.double(as.character(growthModels$Var7Min[run])),
as.double(as.character(growthModels$Var8Min[run])),
as.double(as.character(growthModels$Var9Min[run])),
as.double(as.character(growthModels$Var10Min[run])))*shiftingRangeOfVariablesSlightly
myVarMax <- c(as.double(as.character(growthModels$Var1Max[run])),
as.double(as.character(growthModels$Var2Max[run])),
as.double(as.character(growthModels$Var3Max[run])),
as.double(as.character(growthModels$Var4Max[run])),
as.double(as.character(growthModels$Var5Max[run])),
as.double(as.character(growthModels$Var6Max[run])),
as.double(as.character(growthModels$Var7Max[run])),
as.double(as.character(growthModels$Var8Max[run])),
as.double(as.character(growthModels$Var9Max[run])),
as.double(as.character(growthModels$Var10Max[run])))/shiftingRangeOfVariablesSlightly
# preprocess nonsensical entries of minimum and maximum of variable range
# all entries after nrOfVariables is reached are considered nonsensical
myVarMin[nrOfVariables+1:length(myVarMin)] <- NA
myVarMin[nrOfVariables+1:length(myVarMin)] <- NA
# for cases where min & max was put in wrong order in gropin
for(myVarOrder in 1:nrOfVariables){
if(myVarMin[myVarOrder]>myVarMax[myVarOrder]){
help <- myVarMax[myVarOrder]
myVarMax[myVarOrder] <- myVarMin[myVarOrder]
myVarMin[myVarOrder] <- help
}
}
###########################################################
# create the R script text file with only regular variables
###########################################################
# setting parameters: variables (1st step defining r script)
# later converting this script to fskx
# note that parameter script is not used for transfer to fskx
# rather it is used to test if this would work as an r-script
# for bug fixing purposes
###########################################################
# comments to identify for parameter script
myParScript <- "#############################\n# start of Parameter script\n#############################"
valuesForParameters <- rep(NA,nrOfVariables)
#adding all variables to parameter script
for (j in 1:nrOfVariables) {
myParScript <- append(myParScript,paste0(myVarNames[j],
" <- seq(" ,
myVarMin[j],
",",
myVarMax[j],
",length.out=",
lenOfVar,
")")
)
# create vector of input values for annotation schema later
valuesForParameters[j] <- paste0("seq(" ,
myVarMin[j],
",",
myVarMax[j],
",length.out=",
lenOfVar,
")")
}
myParScript <- append(myParScript,"#############################\n# end of Parameter script\n#############################")
##############################################################################
# end of setting parameters
##############################################################################
##############################################################################
# Start model script
##############################################################################
# comments to identify for model script
myModelScript <- paste("#############################",
"\n# start of Model script Gropin ID",
growthModels$ModelID[run],
"\n#############################")
# column "equation" is evaluated
# as for the equation for the response surface model
# in gropin excel code, variables are referred to their position in the
# corresponding sheet -> in "equation" positions are converted into
# variable names
gropinVarNames <- c("B2","C2","D2",
"E2","F2","G2",
"H2","I2","J2")
gropinCoeffNames <- c("K2","M2","O2","Q2","S2",
"U2","W2","Y2","AA2","AC2",
"AE2","AG2","AH2","AJ2","AL2",
"AN2","AP2","AR2","AT2","AV2")
# replacing gropin excel position names with actual variable names
# function "toupper" ensures that all gropin variables are upper case
# important for replacement to variable
myEq <- gsubfn("\\w+",as.list(setNames(myVarNames[1:nrOfVariables],
gropinVarNames[1:nrOfVariables])),
toupper(growthModels$equation[run]))
# gropin uses excel functions to make certain calculations
# in order to convert each line to R, these function names
# need to be corrected
# SOLUTION: collect the names of excel functions and
# the names of R functions in a list
gropinFunctionNames <- c("SQRT","EXP","LN","ln")
FunctionNames <- c("sqrt","exp","log","log")
# replacing gropin function names with R function names
myEq <- gsubfn("\\w+",as.list(setNames(FunctionNames,gropinFunctionNames)),myEq)
myModelScript <- append(myModelScript," ")
myModelScript <- append(myModelScript,"# constant coefficients for this model")
# Entering coefficients hardcoded into model script
# different models have different coefficients
namesOfCoeffsList<-growthModels[run,names(growthModels)[53:92][c(TRUE,FALSE)]]
valuesOfCoeffsList<-growthModels[run,names(growthModels)[53:92][c(FALSE,TRUE)]]
# extracting actual names and values only and remove potential special characters
if (namesOfCoeffsList[1]!='not used') {
namesOfCoeffs <- as.character(unlist(namesOfCoeffsList))[!is.na(as.character(unlist(namesOfCoeffsList)))]
namesOfCoeffs <- gsub("[+]","",namesOfCoeffs)
namesOfCoeffs <- gsub(" ","",namesOfCoeffs)
valuesOfCoeffs <- as.character(unlist(valuesOfCoeffsList))[!is.na(as.character(valuesOfCoeffsList))]
nrOfCoeffs <- length(namesOfCoeffs)
for (c in 1:nrOfCoeffs) {
myModelScript <- append(myModelScript,paste0(namesOfCoeffs[c]," <- ",valuesOfCoeffs[c]))
}
}
# adding coefficients to parameter list
if (namesOfCoeffsList[1]!='not used') {
#replacing gropin coeff names with correct names
myEq <- gsubfn("\\w+",
as.list(setNames(namesOfCoeffs,
gropinCoeffNames[1:length(namesOfCoeffs)])),
myEq)
}
myModelScript <- append(myModelScript," ")
myModelScript <- append(myModelScript,
paste0("variables <- data.frame(",
paste(myVarNames[1:nrOfVariables],collapse = ','),
")")
)
myModelScript <- append(myModelScript,
"argumentsPar <- expand.grid(variables)"
)
# here is the equation to calculate mumax added to the script
myModelScript <- append(myModelScript," ")
myModelScript <- append(myModelScript,"# heart of the model")
myModelScript <- append(myModelScript,
paste0("response_surface <- function(",
paste(myVarNames[1:nrOfVariables],collapse = ','),
") {\n   mumax <-",
myEq))
myModelScript <- append(myModelScript,"\nreturn(mumax=mumax)\n} ")
myModelScript <- append(myModelScript,"\n# output parameters")
myModelScript <- append(myModelScript,
paste0("responseSurface <- cbind(argumentsPar,response_surface(",
paste0("argumentsPar['",myVarNames[1:nrOfVariables],"']",collapse = ','),
"))",
"\ncolnames(responseSurface) <- c(colnames(argumentsPar),'",
gsub("[[:punct:]]","",as.character(growthModels$mumax[run])),
"')")
)
myModelScript <- append(myModelScript,"#############################\n# End of Model script\n#############################")
##############################################################################
# End of Model Scripting
##############################################################################
myVarNames
myVarNames[!is.na(myVarNames)]
combn(myVarNames[!is.na(myVarNames)],2)
varPairs <- combn(myVarNames[!is.na(myVarNames)],2)
varPairs[,1]
varPairs[,2]
varPairs[,3]
length(myVarNames)
length(myVarNames[!is.na(myVarNames)]
)
varPairs[1,1]
varPairs[1,2]
varPairs[2,1]
myVarNames
myVarNames[3]
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
mtext("Weibull distribution", line=0, side=3, outer=TRUE, cex=2)
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
run
mdID
namesOfVars
idsOfVars
myVarNames[fskPar]
all2VarModels
source('~/Projects/ModelRepository/gropin/gropin2R.r')
all2VarModels
mdID <- 10
namesOfVars[mdID]
myVarNames[fskPar]
qq <- c("a","b","c")
if(qq %in% "a") print("aha!")
if(qq %in% "b") print("aha!")
which(qq %in% "b")
is(qq %in% "b")
is.element(qq %in% "b")
qq %in% "b"
!qq %in% "b"
!(qq %in% "b")
which(qq %in% "b")
which(qq %in% "sd")
(qq %in% "sd")
which(qq %in% "sd")
is.na(which(qq %in% "sd"))
is.element("a",qq)
is.element("d",qq)
1is.element("d",qq)
!is.element("d",qq)
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
all2VarModels
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript154.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript432.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript243.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
gsub("^","","test^fdfd"
)
aa<-"test^fdfd"
gsub("[[:punct:]]", "", aa)
aa<-"test^-^1_fdfd"
gsub("[[:punct:]]", "", aa)
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript263.r')
#############################
# start of Parameter script
#############################
T <- seq(4.004,24.975024975025,length.out=21)
pH <- seq(3.6036,4.4955044955045,length.out=21)
Ac <- seq(0,3.996003996004,length.out=21)
#############################
# end of Parameter script
#############################
#############################
# start of Model script Gropin ID 263
#############################
# constant coefficients for this model
variables <- data.frame(T,pH,Ac)
argumentsPar <- expand.grid(variables)
# heart of the model
response_surface <- function(T,pH,Ac) {
mumax <-(0.046*(T+5.260)*sqrt(1-10^(3.793-pH))*sqrt(1-sqrt((Ac/(1+10^(pH-4.76)))/7.59)))^2/24
return(mumax=mumax)
}
# output parameters
responseSurface <- cbind(argumentsPar,response_surface(argumentsPar['T'],argumentsPar['pH'],argumentsPar['Ac']))
colnames(responseSurface) <- c(colnames(argumentsPar),'mumax')
response_surface(4,3.6,0)
1-10^(3.793-pH)
sqrt(1-10^(3.793-pH))
source('~/Projects/ModelRepository/gropin/fullscript/fullScript263.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
listOfNonfunctioningModels
growthModels$ModelID[run] %in% listOfNonfunctioningModels
###################################################
# bugfixing parameters, non functional for transfer
###################################################
# finding weird models with lots of exceptions
# than one wants to exclude until further notice
listOfNonfunctioningModels <- c(263)
growthModels$ModelID[run] %in% listOfNonfunctioningModels
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript264.r')
source('~/Projects/ModelRepository/gropin/gropin2R.r')
source('~/Projects/ModelRepository/gropin/editfskx.r')
