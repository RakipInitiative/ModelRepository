logN(mumax_kinetic)[1]
simTime
text(0,10,'test')
text(simTime,logN(mumax_kinetic)[1],'test')
source('~/BfR/EFSA/210411/gropin492.r')
source('~/BfR/EFSA/210411/gropin492.r')
source('~/BfR/EFSA/210411/gropin492.r')
source('~/BfR/EFSA/210411/gropin492.r')
source('~/BfR/EFSA/210411/gropin492.r')
source('~/BfR/EFSA/210411/gropin492.r')
source('~/BfR/EFSA/210411/gropin492.r')
source('~/BfR/EFSA/210411/gropin492.r')
source('~/BfR/EFSA/210411/gropin492.r')
multVar1
plot(T)
71*21^4
21^4
a=21^4
a*71
a*71/1000
append(c(1,2),3)
append(c(1,2),'test')
a<-append(c(1,2),'test')
append(a,'test')
a
append(a,'test','test')
append(a,c('test','test'))
seq(0,20,length.out = 21)
source('~/BfR/EFSA/210411/gropin256.r')
mumax*timesteps
seq(1,10)
rep(1,10)
responseSurface <- cbind(seq(1,10),rep(1,10))
dim(responseSurface)
myDF <- dim(responseSurface)
myDF[2]
responseSurface[,myDF[2]]
responseSurface[,1:myDF[2]-1]
colnames(cbind(seq(1,10),rep(1,10)))
colnames(data.frame(cbind(seq(1,10),rep(1,10))))
responseSurface <- data.frame(cbind(seq(1,10),seq(1,10)))
colnames(responseSurface)
colnames(responseSurface)[1]
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
rep(seq(1,10),2)
cbind(rep(seq(1,10),2),seq(1,10))
#responseSurface <- data.frame(cbind(seq(1,10),seq(1,10)))
responseSurface <- data.frame(cbind(seq(1,10),seq(1,10),seq(1,10)))
responseSurface
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
matrix(timeToXlog,nrow=myDF[1])
timeToXlog
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
matrix(timeToXlog,nrow=sqrt(myDF[1]))
responseSurface[,1]
colnames(responseSurface)
myAxis<-colnames(responseSurface)
esponseSurface.pivot(index='X1',columns='X2',values='X3')
responseSurface.pivot(index='X1',columns='X2',values='X3')
install.packages('reshape')
library(reshape)
cast(responseSurface, X1 ~ X2)
#responseSurface <- data.frame(cbind(seq(1,10),seq(1,10)))
responseSurface <- data.frame(cbind(rep(1:4,4),rep(1:4,4),seq(1,16)))
cast(responseSurface, X1 ~ X2)
#responseSurface <- data.frame(cbind(seq(1,10),seq(1,10)))
responseSurface <- data.frame(cbind(rep(1:4,4),rep(1:4,times=4),seq(1,16)))
View(responseSurface)
#responseSurface <- data.frame(cbind(seq(1,10),seq(1,10)))
responseSurface <- data.frame(cbind(rep(1:4,4),rep(1:4,each=4),seq(1,16)))
cast(responseSurface, X1 ~ X2)
dcast(responseSurface, X1 ~ X2)
install.packages("reshape2")
library(reshape2)
dcast(responseSurface, X1 ~ X2)
acast(responseSurface, X1 ~ X2)
lagTime <- 10
logIncrease <- 1
#responseSurface <- data.frame(cbind(seq(1,10),seq(1,10)))
responseSurface <- data.frame(cbind(rep(1:4,4),rep(1:4,each=4),seq(1,16)))
#############################
# start of Model script
#############################
myDF <- dim(responseSurface)
# mumax is always in the last column
mumax <- responseSurface[,myDF[2]]
# all corresponding parameters are in the other columns
nrOfIndependentVars <- myDF[2]-1
argumentsPar <- responseSurface[,1:nrOfIndependentVars]
timeToXlog <- lagTime + logIncrease/mumax
timeToXlog
timeToXlog <- data.frame(cbind(argumentsPar,lagTime + logIncrease/mumax))
timeToXlog <- lagTime + logIncrease/mumax
resultDF <- data.frame(cbind(argumentsPar,timeToXlog))
myAxis <- colnames(argumentsPar)
timeToXlog <- lagTime + logIncrease/mumax
resultDF <- acast(data.frame(cbind(argumentsPar,timeToXlog)),myAxis[1] ~ myAxis[2])
resultDF
data.frame(cbind(argumentsPar,timeToXlog))
myDF <- data.frame(cbind(argumentsPar,timeToXlog))
acast(myDF,X1~X2)
acast(myDF,myAxis)
acast(myDF,myAxis[1]~myAxis[Â²])
acast(myDF,myAxis[1]~myAxis[2])
myAxis
acast(myDF,as.character(myAxis[1])~as.character(myAxis[2]))
acast(myDF,as.factor(myAxis[1])~as.factor(myAxis[2]))
acast(myDF,as.formula(myAxis[1])~as.formula(myAxis[2]))
acast(myDF,paste(myAxis[1], myAxis[2], sep="~")
)
acast(myDF,paste(myAxis[1], myAxis[2], sep="~"))
myDF
acast(myDF,paste(myAxis[1], myAxis[2], sep="~"),value=timeToXlog)
acast(myDF,paste(myAxis[1], myAxis[2], sep="~"))
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
lagTime <- 10
logIncrease <- 1
#responseSurface <- data.frame(cbind(seq(1,10),seq(1,10)))
responseSurface <- data.frame(cbind(rep(1:4,4),rep(1:4,each=4),seq(1,16)))
#############################
# start of Model script
#############################
myDF <- dim(responseSurface)
# mumax is always in the last column
mumax <- responseSurface[,myDF[2]]
# all corresponding parameters are in the other columns
nrOfIndependentVars <- myDF[2]-1
argumentsPar <- responseSurface[,1:nrOfIndependentVars]
myAxis <- colnames(argumentsPar)
timeToXlog <- lagTime + logIncrease/mumax
myDF <- data.frame(cbind(argumentsPar,timeToXlog))
result <- acast(myDF,paste(myAxis[1], myAxis[2], sep="~"))
responseSurface[,1]
colnames(myDF)
colnames(result)
as.numeric(colnames(result))
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
source('~/Projects/ModelRepository/gropin/time_to_X_Log_Fullscript.r')
library(reshape2)
remove.packages("reshape2")
library(reshape2)
startsWith("test","s")
library(stringr)
a <- " anything goes here, STR1 GET_ME STR2, anything goes here"
res <- str_match(a, "STR1\\s*(.*?)\\s*STR2")
res
a <- " anything goesSTR2 here, STR1 GET_MESTR2, anything goes here"
res <- str_match(a, "STR1\\s*(.*?)\\s*STR2")
res
#library(rjson)
library(zip)
# project path / obsolete in source mode
thisProjectPath <- "C:/Users/Joker/Documents/Projects/ModelRepository/gropin/"
tempFolder <- "temp/"
sourceSubFolder <- "testingstuff/"
targetSubFolder <- "finishedFSKX/"
myList <- list.files(file.path(thisProjectPath,sourceSubFolder),pattern="*.fskx")
myList
targetSubFolder <- "finishedTEST/"
myList <- list.files(file.path(thisProjectPath,sourceSubFolder),pattern="*.fskx")
if(!dir.exists(file.path(thisProjectPath,targetSubFolder))){
dir.create(file.path(thisProjectPath,targetSubFolder))
}
# bring current date into format used by meta data schema
currentDate <- sub("0?(.+)-0?(.+)-0?(.+)", "\\1,\\2,\\3", Sys.Date())
# new metadata string
newCreationDate <- paste0(",\"creationDate\":[",
currentDate,
"],\"modificationDate\":[]")
run <- 1
#for(run in 1:length(myList)) {
# check if folders exist
if(!dir.exists(file.path(thisProjectPath,tempFolder))){
dir.create(file.path(thisProjectPath,tempFolder))
}
zipSourceFile <- paste0(thisProjectPath,sourceSubFolder,myList[run])
zipTargetFile <- paste0(thisProjectPath,targetSubFolder,myList[run])
# unload fskx file into temp folder
unzip(zipSourceFile,exdir = file.path(thisProjectPath,tempFolder))
##############################################################
# PUT YOUR CHANGES IN HERE
##############################################################
# get metaData for creation Date
oldData <- readLines(paste0(thisProjectPath,tempFolder,"metaData.json"))
# replace no Creation date with current day
# NOTE! works only if no creation date was entered!
changedData <- gsub(pattern = ",\"rights\":\"",
replace = paste0(newCreationDate,",\"rights\":\""),
x = oldData)
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "\"comment\":\"\\s*(.*?)\\s*\"}],\"")
newData <- changedData
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "\"comment\":\"\\s*(.*?)\\s*\"}],\"")
changedData
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "\"comment\":\"\\s*(.*?)\\s*\"}],")
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment:\\s*(.*?)\\s*}],")
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\\s*(.*?)\\s*t")
capturedJournalInfo
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\\s*(.*?)\\s*language")
capturedJournalInfo[2]
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\\s*(.*?)\\s*language")
capturedJournalInfo[2]
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\"\\s*(.*?)\\s*language")
capturedJournalInfo[2]
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"}]")
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"}]")
capturedJournalInfo[2]
as.list(strsplit(capturedJournalInfo[2], ",")[[1]])
as.list(strsplit(capturedJournalInfo[2], ","))
as.list(strsplit(capturedJournalInfo[2], ","))[1]
as.list(strsplit(capturedJournalInfo[2], ","))[[1]
]
list(strsplit(capturedJournalInfo[2], ","))[[1]
]
list(strsplit(capturedJournalInfo[2], ","))
strsplit(capturedJournalInfo[2], ",")
unlist(strsplit(capturedJournalInfo[2], ","))
unlist(strsplit(capturedJournalInfo[2], ","))[1]
unlist(strsplit(capturedJournalInfo[2], ","))[2]
unlist(strsplit(capturedJournalInfo[2], ","))[3]
#library(rjson)
library(zip)
library(stringr)
# project path / obsolete in source mode
thisProjectPath <- "C:/Users/Joker/Documents/Projects/ModelRepository/gropin/"
tempFolder <- "temp/"
sourceSubFolder <- "testingstuff/"
targetSubFolder <- "finishedTEST/"
myList <- list.files(file.path(thisProjectPath,sourceSubFolder),pattern="*.fskx")
if(!dir.exists(file.path(thisProjectPath,targetSubFolder))){
dir.create(file.path(thisProjectPath,targetSubFolder))
}
# bring current date into format used by meta data schema
currentDate <- sub("0?(.+)-0?(.+)-0?(.+)", "\\1,\\2,\\3", Sys.Date())
# new metadata string
newCreationDate <- paste0(",\"creationDate\":[",
currentDate,
"],\"modificationDate\":[]")
run <- 1
#for(run in 1:length(myList)) {
# check if folders exist
if(!dir.exists(file.path(thisProjectPath,tempFolder))){
dir.create(file.path(thisProjectPath,tempFolder))
}
zipSourceFile <- paste0(thisProjectPath,sourceSubFolder,myList[run])
zipTargetFile <- paste0(thisProjectPath,targetSubFolder,myList[run])
# unload fskx file into temp folder
unzip(zipSourceFile,exdir = file.path(thisProjectPath,tempFolder))
##############################################################
# PUT YOUR CHANGES IN HERE
##############################################################
# get metaData for creation Date
oldData <- readLines(paste0(thisProjectPath,tempFolder,"metaData.json"))
# replace no Creation date with current day
# NOTE! works only if no creation date was entered!
changedData <- gsub(pattern = ",\"rights\":\"",
replace = paste0(newCreationDate,",\"rights\":\""),
x = oldData)
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")
journalVolumeIssue <- unlist(strsplit(capturedJournalInfo[2], ","))
myString <- paste0(",\"journal\":\"",
journalVolumeIssue[1],
"\",\"volume\":\"",
journalVolumeIssue[2],
"\",\"issue\":\"",
journalVolumeIssue[3],
"\",\"status\":\"Published\",",
"\"website\":\"https://www.aua.gr/psomas/gropin/\",",
"\"comment\":\"\",\"abstract\":\"\"")
# TODO : find a way to replace comment incl content with myString!
test <- gsub(pattern = str_match(changedData, "comment\":\"\\s*(.*?)\\s*\""), replace = myString, x = changedData)
test <- gsub(pattern = str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")[1], replace = myString, x = changedData)
test
capturedJournalInfo
#library(rjson)
library(zip)
library(stringr)
# project path / obsolete in source mode
thisProjectPath <- "C:/Users/Joker/Documents/Projects/ModelRepository/gropin/"
tempFolder <- "temp/"
sourceSubFolder <- "testingstuff/"
targetSubFolder <- "finishedTEST/"
myList <- list.files(file.path(thisProjectPath,sourceSubFolder),pattern="*.fskx")
if(!dir.exists(file.path(thisProjectPath,targetSubFolder))){
dir.create(file.path(thisProjectPath,targetSubFolder))
}
# bring current date into format used by meta data schema
currentDate <- sub("0?(.+)-0?(.+)-0?(.+)", "\\1,\\2,\\3", Sys.Date())
# new metadata string
newCreationDate <- paste0(",\"creationDate\":[",
currentDate,
"],\"modificationDate\":[]")
run <- 1
#for(run in 1:length(myList)) {
# check if folders exist
if(!dir.exists(file.path(thisProjectPath,tempFolder))){
dir.create(file.path(thisProjectPath,tempFolder))
}
zipSourceFile <- paste0(thisProjectPath,sourceSubFolder,myList[run])
zipTargetFile <- paste0(thisProjectPath,targetSubFolder,myList[run])
# unload fskx file into temp folder
unzip(zipSourceFile,exdir = file.path(thisProjectPath,tempFolder))
##############################################################
# PUT YOUR CHANGES IN HERE
##############################################################
# get metaData for creation Date
oldData <- readLines(paste0(thisProjectPath,tempFolder,"metaData.json"))
# replace no Creation date with current day
# NOTE! works only if no creation date was entered!
changedData <- gsub(pattern = ",\"rights\":\"",
replace = paste0(newCreationDate,",\"rights\":\""),
x = oldData)
# editing reference
# first find reference, stored in comments (design decision)
capturedJournalInfo <- str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")
journalVolumeIssue <- unlist(strsplit(capturedJournalInfo[2], ","))
myString <- paste0(",\"journal\":\"",
journalVolumeIssue[1],
"\",\"volume\":\"",
journalVolumeIssue[2],
"\",\"issue\":\"",
journalVolumeIssue[3],
"\",\"status\":\"Published\",",
"\"website\":\"https://www.aua.gr/psomas/gropin/\",",
"\"comment\":\"\",\"abstract\":\"\"")
# TODO : find a way to replace comment incl content with myString!
myString
test <- gsub(pattern = str_match(changedData, "comment\":\"\\s*(.*?)\\s*\"")[1], replace = myString, x = changedData)
test
source('~/Projects/ModelRepository/gropin/editfskx.r')
source('~/Projects/ModelRepository/gropin/editfskx.r')
source('~/Projects/ModelRepository/gropin/editfskx.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
run
myVarMin#
myVarMax
myParScript
growthModels$ModelID[run]
namesOfVars[mdID]
mdID
idsOfVars
myVarNames
idsOfVars
all2VarModels
all2VarModels <- as.character(data.frame(table(model2Vars))$model2Vars)
all2VarModels
View(growthModels)
View(growthModels)
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
21*21*21
colnames(responseSurface)
aw
min(aw)
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
missingAxis
checkPresent
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
#############################
# start of Parameter script
#############################
T_start <- 2.002
T_end <- 19.98001998002
T_fixed <- 10.99
pH_start <- 4.004
pH_end <- 7.49250749250749
pH_fixed <- 5.75
aw_start <- 0.95095
aw_end <- 0.994005994005994
aw_fixed <- 0.97
visVar1 <- 'T'
visVar2 <- 'pH'
#############################
# end of Parameter script
#############################
#############################
# start of Model script Gropin ID 1040
#############################
# variables of this model
T <- seq(2.002,19.98001998002,length.out=21)
pH <- seq(4.004,7.49250749250749,length.out=21)
aw <- seq(0.95095,0.994005994005994,length.out=21)
# constant coefficients for this model
variables <- data.frame(T,pH,aw)
argumentsPar <- expand.grid(variables)
# heart of the model
response_surface <- function(T,pH,aw) {
mumax <-exp(-6.001+0.2342*T+14.12*(sqrt(1-aw))-0.003552*(T^2)+0.005554*(pH^2)-76.68*((sqrt(1-aw))^2))
return(mumax=mumax)
}
# output parameters
responseSurface <- cbind(argumentsPar,response_surface(argumentsPar['T'],argumentsPar['pH'],argumentsPar['aw']))
colnames(responseSurface) <- c(colnames(argumentsPar),'lnmumax')
#############################
# End of Model script
#############################
#############################
# start of Visualisation script Gropin ID 1040
#############################
visAxes <- c(visVar1,visVar2)
expectedAxes <- c('T','pH','aw')
checkPresent <- match(expectedAxes,visAxes)
missingAxis <- expectedAxes[is.na(checkPresent)]
if('T' %in% visAxes){
ax1 <- T
} else {
ax1 <- T_fixed
}
if('pH' %in% visAxes){
ax2 <- pH
} else {
ax2 <- pH_fixed
}
if('aw' %in% visAxes){
ax3 <- aw
} else {
ax3 <- aw_fixed
}
argumentsVisVar <- expand.grid(ax1,ax2,ax3)
colnames(argumentsVisVar) <- expectedAxes
firstChosenAxis <- expectedAxes[
min(
which(expectedAxes == expectedAxes[match(1,checkPresent)]),
which(expectedAxes == expectedAxes[match(2,checkPresent)]))
]
secondChosenAxis <- expectedAxes[
max(
which(expectedAxes == expectedAxes[match(1,checkPresent)]),
which(expectedAxes == expectedAxes[match(2,checkPresent)]))
]
result <- matrix(unlist(response_surface(
argumentsVisVar['T'],	argumentsVisVar['pH'],	argumentsVisVar['aw']
)),nrow=21,byrow=F)
#order of entries in result is always:
# rows of the 1st chosen index of expectedAxes
# cols of the 2nd chosen index of expectedAxes
# this makes sure, the order of visVar1 and visVar2 are not relevant
rownames(result) <- unlist(arguments[firstChosenAxis])
colnames(result) <- unlist(arguments[secondChosenAxis])
persp(as.numeric(rownames(result)),
as.numeric(colnames(result)),
result,
col = 'green',
xlab=firstChosenAxis,
ylab=secondChosenAxis,
zlab='mu_max',
main='Response surface ln<mu>max for Gropin Model (ID 1040)',
sub='Yarrowia lipolyticain/onDairy products, Sugar solutions, beverages',
theta=305,
phi=20,
shade=0.25,
ticktype = 'detailed')
arguments[firstChosenAxis]
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
source('~/Projects/ModelRepository/gropin/gropin2R_test3var.r')
source('~/Projects/ModelRepository/gropin/fullscript/fullScript1040.r')
