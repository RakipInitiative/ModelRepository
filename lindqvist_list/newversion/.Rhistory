library(workflowr)
getwd()
wflow_git_pull(remote = "https://gitlab.com/DjMaFu/networkfeatures.git", branch = "master, username="djmafu", password = "Braucheichwirklich1PW?!")
wflow_git_pull(remote = "https://gitlab.com/DjMaFu/networkfeatures.git", branch = "master", username="djmafu", password = "Braucheichwirklich1PW?!")
source('~/Projects/ModelRepository/lindqvist_list/newversion/lindqvist_fullscript.r', echo=TRUE)
install.packages("msm", lib="C:/Program Files/User/R/R-4.0.2/library")
source('~/Projects/ModelRepository/lindqvist_list/newversion/lindqvist_fullscript.r', echo=TRUE)
install.packages("msm", lib="C:/Program Files/User/R/R-4.0.2/library")
source('~/Projects/ModelRepository/lindqvist_list/newversion/lindqvist_fullscript.r', echo=TRUE)
source('~/Projects/ModelRepository/lindqvist_list/newversion/lindqvist_fullscript.r', echo=TRUE)
source('~/Projects/ModelRepository/lindqvist_list/newversion/lindqvist_fullscript.r', echo=TRUE)
Pill_mean_r
Pill_mean_r[,4:5]
source('~/Projects/ModelRepository/lindqvist_list/newversion/lindqvist_fullscript.r', echo=TRUE)
source('~/Projects/ModelRepository/lindqvist_list/newversion/lindqvist_fullscript.r', echo=TRUE)
source('~/Projects/ModelRepository/lindqvist_list/newversion/lindqvist_fullscript.r', echo=TRUE)
#############################
### Visualisation Script  ###
#############################
library(gridExtra)
library(gridGraphics)
library(gtable)
mytheme <- gridExtra::ttheme_default(
core = list(fg_params=list(cex = 1.0)),
colhead = list(fg_params=list(cex = 1.0)),
rowhead = list(fg_params=list(cex = 1.0)))
Pill_mean_Extract <- Pill_mean_r[,4:5]
myt <- gridExtra::tableGrob(signif(Pill_mean_Extract,digits=3), theme = mytheme)
if (pop==11) {myGroup <- "female"} else {myGroup <- "male"}
myTitle <- paste("Probability of illness per serving\nfor population group:",myGroup)
title <- textGrob(myTitle, gp = gpar(fontsize = 18))
padding <- unit(0.5,"line")
table <- gtable_add_rows(
myt, heights = grobHeight(title) + padding, pos = 0
)
table <- gtable_add_grob(
table, list(title),
t = 1, l = 1, r = ncol(table)
)
frame()
grid.draw(table)
grid.draw(table)
grid.draw(table)
source('~/Projects/ModelRepository/lindqvist_list/newversion/lindqvist_fullscript.r', echo=TRUE)
#############################
### Visualisation Script  ###
#############################
library(gridExtra)
library(gridGraphics)
library(gtable)
# result
mytheme <- gridExtra::ttheme_default(
core = list(fg_params=list(cex = 1.0)),
colhead = list(fg_params=list(cex = 1.0)),
rowhead = list(fg_params=list(cex = 1.0)))
Pill_mean_Extract <- Pill_mean_r[,4:5]
myt <- gridExtra::tableGrob(signif(Pill_mean_Extract,digits=3), theme = mytheme)
if (pop==11) {myGroup <- "female"} else {myGroup <- "male"}
myTitle <- paste("Probability of illness per serving\nfor population group:",myGroup)
title <- textGrob(myTitle, gp = gpar(fontsize = 18))
padding <- unit(0.5,"line")
table <- gtable_add_rows(
myt, heights = grobHeight(title) + padding, pos = 0
)
table <- gtable_add_grob(
table, list(title),
t = 1, l = 1, r = ncol(table)
)
# selected input parameters
parNames <- c("sims","pop","runs","shift","meanTemp","sdTemp",
"Mode_prop_rtime","Max_prop_rtime","lowerTemp",
"upperTemp","Tmin")
parValues <- c(sims,pop,runs,shift,meanTemp,sdTemp,
Mode_prop_rtime,Max_prop_rtime,lowerTemp,
upperTemp,Tmin)
parTable <-  as.data.frame(parValues)
colnames(parTable) <- parNames
length(parNames)
length(parValues)
parTable
rownames(parTable) <- parNames
parTable <- gridExtra::tableGrob(parTable, theme = mytheme)
parTitle <- "Selected input parameters"
parTitle <- textGrob(parTitle, gp = gpar(fontsize = 18))
padding <- unit(0.5,"line")
parTable <- gtable_add_rows(
parTable, heights = grobHeight(parTitle) + padding, pos = 0
)
parTable <- gtable_add_grob(
parTable, list(parTitle),
t = 1, l = 1, r = ncol(parTable)
)
frame()
par(mfrow=c(1,2))
grid.draw(table)
grid.draw(parTable)
frame()
par(mfrow=c(2,1))
grid.draw(table)
grid.draw(parTable)
frame()
par(mfrow=c(2,2))
grid.draw(table)
grid.draw(parTable)
frame()
par(mfrow=c(2,2))
p1<-grid.draw(table)
p2<-grid.draw(parTable)
grid.arrange(p1, p2, nrow = 1)
frame()
#par(mfrow=c(2,2))
p1<-grid.draw(table)
p2<-grid.draw(parTable)
grid.arrange(p1, p2, nrow = 1)
frame()
par(mfrow=c(2,2))
grid.draw(table)
grid.draw(parTable)
frame()
grid.draw(parTable)
parTable <-  as.data.frame(parValues)
rownames(parTable) <- parNames
parTable <- gridExtra::tableGrob(parTable, theme = mytheme)
parTitle <- "Selected\ninput parameters"
parTitle <- textGrob(parTitle, gp = gpar(fontsize = 16))
padding <- unit(0.5,"line")
parTable <- gtable_add_rows(
parTable, heights = grobHeight(parTitle) + padding, pos = 0
)
parTable <- gtable_add_grob(
parTable, list(parTitle),
t = 1, l = 1, r = ncol(parTable)
)
frame()
grid.draw(parTable)
frame()
#frame()
#par(mfrow=c(2,2))
#grid.draw(table)
#grid.draw(parTable)
grid.arrange(table, table, ncol=2)
#frame()
#par(mfrow=c(2,2))
#grid.draw(table)
#grid.draw(parTable)
grid.arrange(table, parTable, ncol=2)
parNames <- c("Number of Simulations","population group","number of iterations per simulation","shift of maximum population density","mean of Temperature	","standard deviation of Temperature",
"Mode of storage time","Max of storage time","minimum of Temperature",
"maximum of Temperature","Tmin?")
parValues <- c(sims,pop,runs,shift,meanTemp,sdTemp,
Mode_prop_rtime,Max_prop_rtime,lowerTemp,
upperTemp,Tmin)
parTable <-  as.data.frame(parValues)
rownames(parTable) <- parNames
parTable <- gridExtra::tableGrob(parTable, theme = mytheme)
parTitle <- "Selected\ninput parameters"
parTitle <- textGrob(parTitle, gp = gpar(fontsize = 16))
padding <- unit(0.5,"line")
parTable <- gtable_add_rows(
parTable, heights = grobHeight(parTitle) + padding, pos = 0
)
parTable <- gtable_add_grob(
parTable, list(parTitle),
t = 1, l = 1, r = ncol(parTable)
)
#frame()
#par(mfrow=c(2,2))
#grid.draw(table)
#grid.draw(parTable)
grid.arrange(table, parTable, ncol=2)
# selected input parameters
parNames <- c("Number of Simulations","population group","number of iterations\nper simulation","shift of maximum population density","mean of Temperature	","standard deviation of Temperature",
"Mode of storage time","Max of storage time","minimum of Temperature",
"maximum of Temperature","Tmin?")
parValues <- c(sims,pop,runs,shift,meanTemp,sdTemp,
Mode_prop_rtime,Max_prop_rtime,lowerTemp,
upperTemp,Tmin)
parTable <-  as.data.frame(parValues)
rownames(parTable) <- parNames
parTable <- gridExtra::tableGrob(parTable, theme = mytheme)
parTitle <- "Selected\ninput parameters"
parTitle <- textGrob(parTitle, gp = gpar(fontsize = 16))
padding <- unit(0.5,"line")
parTable <- gtable_add_rows(
parTable, heights = grobHeight(parTitle) + padding, pos = 0
)
parTable <- gtable_add_grob(
parTable, list(parTitle),
t = 1, l = 1, r = ncol(parTable)
)
#frame()
#par(mfrow=c(2,2))
#grid.draw(table)
#grid.draw(parTable)
grid.arrange(table, parTable, ncol=2)
#grid.draw(table)
# selected input parameters
parNames <- c("Number of Simulations",
"Population group",
"Number of iterations\nper simulation",
"Shift of maximum\npopulation density",
"Mean of Temperature",
"Standard deviation\nof Temperature",
"Mode of storage time",
"Max of storage time",
"Minimum of Temperature",
"Maximum of Temperature",
"Tmin?")
parValues <- c(sims,pop,runs,shift,meanTemp,sdTemp,
Mode_prop_rtime,Max_prop_rtime,lowerTemp,
upperTemp,Tmin)
parTable <-  as.data.frame(parValues)
rownames(parTable) <- parNames
parTable <- gridExtra::tableGrob(parTable, theme = mytheme)
parTitle <- "Selected\ninput parameters"
parTitle <- textGrob(parTitle, gp = gpar(fontsize = 16))
padding <- unit(0.5,"line")
parTable <- gtable_add_rows(
parTable, heights = grobHeight(parTitle) + padding, pos = 0
)
parTable <- gtable_add_grob(
parTable, list(parTitle),
t = 1, l = 1, r = ncol(parTable)
)
#frame()
#par(mfrow=c(2,2))
#grid.draw(table)
#grid.draw(parTable)
grid.arrange(table, parTable, ncol=2)
#grid.draw(table)
#############################
### Visualisation Script  ###
#############################
library(gridExtra)
library(gridGraphics)
library(gtable)
# result
mytheme <- gridExtra::ttheme_default(
core = list(fg_params=list(cex = 1.0)),
colhead = list(fg_params=list(cex = 1.0)),
rowhead = list(fg_params=list(cex = 0.95)))
Pill_mean_Extract <- Pill_mean_r[,4:5]
myt <- gridExtra::tableGrob(signif(Pill_mean_Extract,digits=3), theme = mytheme)
if (pop==11) {myGroup <- "female"} else {myGroup <- "male"}
myTitle <- paste("Probability of illness per serving\nfor population group:",myGroup)
title <- textGrob(myTitle, gp = gpar(fontsize = 18))
padding <- unit(0.5,"line")
table <- gtable_add_rows(
myt, heights = grobHeight(title) + padding, pos = 0
)
table <- gtable_add_grob(
table, list(title),
t = 1, l = 1, r = ncol(table)
)
# selected input parameters
parNames <- c("Number of Simulations",
"Population group",
"Number of iterations\nper simulation",
"Shift of maximum\npopulation density",
"Mean of Temperature",
"Standard deviation\nof Temperature",
"Mode of storage time",
"Max of storage time",
"Minimum of Temperature",
"Maximum of Temperature",
"Tmin?")
parValues <- c(sims,pop,runs,shift,meanTemp,sdTemp,
Mode_prop_rtime,Max_prop_rtime,lowerTemp,
upperTemp,Tmin)
parTable <-  as.data.frame(parValues)
rownames(parTable) <- parNames
parTable <- gridExtra::tableGrob(parTable, theme = mytheme)
parTitle <- "Selected\ninput parameters"
parTitle <- textGrob(parTitle, gp = gpar(fontsize = 16))
padding <- unit(0.5,"line")
parTable <- gtable_add_rows(
parTable, heights = grobHeight(parTitle) + padding, pos = 0
)
parTable <- gtable_add_grob(
parTable, list(parTitle),
t = 1, l = 1, r = ncol(parTable)
)
#frame()
#par(mfrow=c(2,2))
#grid.draw(table)
#grid.draw(parTable)
grid.arrange(table, parTable, ncol=2)
#grid.draw(table)
prev_group
source('~/Projects/ModelRepository/lindqvist_list/newversion/lindqvist_fullscript.r', echo=TRUE)
source('~/Projects/ModelRepository/lindqvist_list/newversion/lindqvist_fullscript.r', echo=TRUE)
source('~/Projects/ModelRepository/lindqvist_list/newversion/lindqvist_fullscript.r', echo=TRUE)
source('~/Projects/ModelRepository/lindqvist_list/newversion/lindqvist_fullscript.r', echo=TRUE)
set.seed(-1)
set.seed(-1000000.0)
rnorm
rnorm(1)
rnorm(1)
